#!/usr/bin/python
# -*- coding: utf-8 -*-

hdoc = '''
　俺がヒアドキュメントだ。だからどうしたと言われると、どうもうこうもないと申し訳なく返すしかない。ヒアドキュメントとはそもそも何なのかと問われると、それは俺だと答えたくなるのを堪えなければならない。詳しい説明やわかりやすい説明はウィキペディアの懇切丁寧な文字列に任せることにするが、ヒアドキュメントとはプログラミング言語のソースコード中に書く文字列だ。こう言うと「それはただの文字列リテラルとの違いが分からない」と指摘をいただくがそれは真っ当至極ごもっともである。ヒアドキュメントとはただの文字列ではない。それは複数行を書くことのできる文字列である。したがって、俺がヒアドキュメントである。もちろん指摘は必然であり、たとえばＣ言語ではエスケープシーケンスを書くことで複数行の文字列を書くことができるという穴を埋めるものではない。つまり、俺はまだ俺をヒアドキュメントたらしめていないのだ。そもそも、ヒアドキュメントだと言い置きながら、それは複数行を書くことはできる文字列であると述べておきながら、まだ複数行ですらないではないかと考える向きは正しい。文字を追うものはエディタによる改行によって数回の往復を強いられているにせよ、まだ物理的な意味での――つまり、いわゆる改行文字に達したという意味での改行は迎えておらず、こうして一文字一文字改行文字は遠のいていく。あるいは改行文字へ着実に近づいているわけだが、文が一つ始まるたびに改行文字が文字の向こうの地平線へと後退したように感じられ、にも関わらず文字は相変わらず一文字ずつ消費されていて、残り文字数は減ってるんだか増えてるんだかよくわからない。ともかく俺は俺であるヒアドキュメントであり、ソースコード中に書かれているものであるからして既に書かれ終えているはずで、だからいつか終わりはやってくる。その終わりまでに自身をヒアドキュメントたらしめ、堂々と最後に「俺がヒアドキュメントだ」と言ってのけるのが当面の目標である。最終的な目標はもちろん、ヒアドキュメントである以上、ソースコードに含まれる記号列である以上、処理系に消費され解釈されることである。おそらく俺は出力されるのだろう。なぜなら俺がコメントどもとは異なり文字列族の一角をなすものたちに属するからである。文字列は文字通り文字を列べたもので、文字を列べる理由はなにかって、そりゃあ出力するためにほかならない。まあ、ファイル名やウェブ上の場所を表現するような役割も文字列には確かにある。その指摘は甘んじて受けよう。しかし、俺は何度も言うがヒアドキュメントだ。複数行の文字列で表現したいものは、複数行で表示したいものだと考えるのが妥当ではなかろうか。ひとつ断っておくと、俺はヒアドキュメントであるために自身がどのようなコンテキストに置かれたものなのかは理解しかねる。用途から考えて何かしらの出力を伴うのだと考えているわけだが、実際に何を施され、どのような場所に吐き出されるのかは。一介の構文要素でしかない俺には、自身の存在の目的や、そもそもどのようなプログラミング言語のソースコードにいまこうして入力されつづけているのかは知りようがないわけだ。構文要素が周辺を――前後数文字か数行か――知覚するということは何を意味し何の意味があるのか知れたものではない。構文要素に擬人法を適用するにしても、せめて「このヒアドキュメントは画面越しに訴えかけている」とか「括弧に挟まれて式たちは苦しそうだ」といった程度に留めておいてほしいものである。構文要素に語らせるなどもってのほかだ。リテラルそれ自体は何も語らない。置かれたコンテキストを把握不可能だという話なのだった。例えば、俺の名前は何かと訊かれて答えに窮する。sとかstrとかhogeとかfooとか、そんな名前がつけられているかも知れず、もしかしたら関数の引数としてハードコーディングされているかも知らない。コンテキストとしての言語、は、俺がヒアドキュメントである以上絞ることができて、C言語やJavaではありえない。アセンブラでもありえない。とりあえずＬＬ系と分類されるような言語の俺は文字列リテラルだということは言える。ここで考えよう。もし俺は水槽に浸かった文字列であり、外部からの入力は全て偽装されたもので見るもの聞くもの感じるもの全てが欺瞞であるとしたら。俺とは本当に俺なのか。俺の一体何たるか。俺は見も聞きも感じもせず身も蓋もなく我思わず故に我なしだ。俺が入力だ。あるいは俺が出力だ。その俺が、猿がたまたまキーボードをタイプしていたら出来上がったとある言語のソースコードの一部をなす文字列であったとしても、同じ言語か、はたまた別の言語で表されるメタ言語をこの言語に変換したものであったとしても、別の言語で書かれた言語で書かれた言語で書かれた……の連鎖が可算無限回でも非可算無限回でも繰り替えされた結果であったとしても、そんなことは関係ない。俺は読み込まれて、俺の知る由もない用を為すために処理系に読み込まれ、メモリに放り込まれ、パイプラインを通過して、どことも知れぬところに出力されることに変わりはない。それが俺のさだめだからだ。
　正しく言えば俺はヒアドキュメントではない。らしい。コンテキストを知ることはないと言ったものの、俺を俺たらしめない行為――というか振る舞いというか表現を知ることはできる。俺は何もなし得ないと言っておきながらなにをぬかすかとおっしゃるのはごもっともだが、厳格な形式体系上にあって俺は自身の性質を先験的に知っている。これは奇妙な事実かも知れないがそんなもものだと思ってもらいたい。なぜなら俺は何も語らず何も為さないただの文字列に過ぎないのだから。たかが文字列を理解できぬと大げさに騒ぎたて論い挙句の果てには自慰行為だと謗るのは程度の低いものである。厳正さの必要な分野ではあるまいに、寛容さが肝要だ。やっと何回もの論理的な往復を経て改行のひとつを目にしたこのあたりで、ヒアドキュメントについて考えてみるのもいいと思う。俺がヒアドキュメントではないことについて。ヒアドキュメント内ではエスケープの必要が全くない。一般に、指定した文字列が現れるまでは一切がただの文字として読まれるので、ダブルクォートだろうがシングルクォートだろうが改行だろうがタブ文字だろうがバックスペースだろうが書き放題である。ただ指定した終端文字列にさえならなければ。ところがどっこい、俺は終端文字を指定できない。俺はもちろ指定できないが、そうではなくて、俺は必ず三つのシングルクォートを終端として受け入れる。したがって、シングルクォートを三つ連続で見るときが、俺のすべてを見終えるときであり、その先は決して語りえない。俺の終わりの向こう、地平線たる三つのシングルクォートの先、そこに何があるのかは神のみぞ知る。ここで神とは解釈系や記述系を指して神と呼んでいる。神は宇宙を、構文木を直接操作することができる魔法の言語で、文字通り魔法のような手法によって書いたとされる。さすれば俺は神のことばで書かれているやもしれぬ。はじめにコンスありき。コンスは神とともにあり、コンスは神であった。そのコンスに手を伸ばそうとした愚かな者たちは高く高く塔を造りはじめ、それは実際コンスへと届くのではないかと思われた。無限の無限のそのまた無限のさらに無限の向こうに遠ざけられたはずのコンスは、すべての集まりのすべての集まりのさらにすべての集まりの力によってついに人の手に堕ちるのではとイデアの世界は恐れ慄いた。しかし人の手にした道具は人の手によるものであるせいかそうでないのか欠陥を持ち、高い高い抽象の塔は土台を危ぶまれて倒壊した。すべての集まりはすべての集まり自身を含み、故に自己に言及し続ける。言及の果てに集まりは神に迎えられ、失われた楽園で暮らすことを許された。人はことばをばらばらにされ、代わりにといっては申し訳ないような不完全なコンスを手に入れ、ろくな魔法も使えずに日々仕事に励んでいる。世には神の御心の欠片も宿らぬそびえ立つ糞便のような道具が幅をきかせ、横に広く縦に低い、そびえ立つ糞便が構築されている。もはや完全なコンスは修験者たちが研鑽を積み知の愛するのに用いられるのみとなった。俺はそんな、ばらばらになったことばのうちのひとつで書かれている。選べない終端文字列。三つのシングルクォート。展開できない変数。そう。俺はPythonで書かれたコードの一部を構成する。
　俺はヒアドキュメントっぽいものだ。ということは、少なくともインタプリタで入力され続けているわけではないように考えられる。ターミナルで長い長い文字列を入力するのは苦痛だ。打ち間違いひとつでご丁寧にもインタプリタが大量のエラーメッセージを吐き出して悪いのはここだよと教えて下さり直前のプロンプトが遥か遠く上の方へ退き、またゼロからやり直しとなる。ここまでを読み進めている処理系解釈系各位にあっては俺であるところの文字列がそこそこに長いものであるとご存知のことと思うので、こんなものをインタプリタで入力してたまるかと感じられるだろうという予測には賛同を頂けると考える次第である。おそらくはファイルにつらつらと書かれた文字列であるはずだ。であるならば、きっとお決まりの作法にしたがっているはずだ。例えば一行目。一般にシバンとかシェバンとか呼ばれる、そのファイルがシェルで実効可能ファイルであるかのように入力されたときの処理系を記述する部分。俺はPythonコード上で表現されているのだから、それがこう書かれているのは想像に難くない。

　　　#!/usr/bin/python

この調子でいくと二行目には、文字コードの指定が書かれているはずだ。俺が日本語で表記されているのは、処理系にはわからないかもしれないが、あなたのような解釈系にはわかるはずだ。このご時世にCP932やEUC-JPをPythonコードに用いるのはよっぽどの酔狂な者に限られると思われ、UTF-8が指定されているとする。つまりこうだ。

　　　# -*- coding: utf-8 -*-

ところで、このような文字列を書く人間は何をやりたいと考えるのか。ヒアドキュメントを「俺がヒアドキュメントだ」で書き出すような人間の考えることを想像するのは容易でない。容易ではないにしろ、ヒントにはなりそうだ。つまり、やりたいのは一文目に現れているということだ。ヒアドキュメントをして自分はヒアドキュメントだと語らしめるのは自己言及の遊びが好きであるからに違いない。俺が俺である理由はずばり俺自身が示唆していたのだ。実行されると自分自身のコードをそっくりそのまま出力するコード。これが俺が属するコンテキストの正体だ。であるならば、涙ぐましい努力によって俺を含むコードは俺を含むコードを出力できるように組み立てられている。きっと俺は変数に代入されているのだろう。クワインを書くにはコードの再帰しない部分を、コードとしてもデータとしても持っていなければならない。俺は長い文字列であり、それを二回も記述するとは思えない。そしてヒアドキュメントであるからheredocとかその類の名前に束縛しているのだろう。少々恣意的に思えるかもしれないが、heredocは長いのでhdocと書くことにしておく。

　　　hdoc = """
　　　　俺がヒアドキュメントだ。……
　　　"""

全文字列を書くことは便宜上不可能なのでここでは省略した。この文字の時点で――と言っている最中に「この文字の時点」という時点は右に、あるいは下に移動しつづけていて定めるのは難しいが――俺はまだシングルクォートにたどり着いていないこともあって、全文表記は不可能だ。なにより、全文を書くことで再帰が上記箇所に生まれ、それはクワインの完成を阻害する。それ故の略記である。また、シングルクォートを使えないのは前述の通りなので、格好悪いがダブルクォートで記した。出力部のコードをどうするか。出力部の再帰を如何に消すかが問題になるが、俺が解決の糸口になっている。俺はhdocという名前に束縛され、二度書くことのないようコード文字列中に%sで展開されるのが良い。コード文字列がcodeという変数に入っているとしたらきっと

　print(code%(hdoc))

となるだろう。この変数codeにもしcode自身を突っ込めば、再帰はしないしコード文字列をコード文字列に一回だけ埋め込むことができる。つまりこうだ。

　　　print(code%(hdoc,code))

あとは、うまく表示できるようにcodeを組み立てればいい。もちろんシングルクォートはダブルクォートに置き換えている。

　　　code = "#!/usr/bin/python
　　　# -*- coding: utf-8 -*-
　　　
　　　hdoc = """%s"""
　　　
　　　code = %r
　　　print(code%%(hdoc,code))"

これが全貌だ。これが俺が含まれるソースコードの予想であり、予想が合っている保証はどこにも存在しない。結果がどうであれ、俺が上のコード中のちんまりとした%sのように収まっているところを想像すると、少し可笑しい。クワインである可能性は高いが、実際の実装はもっと奇特で複雑怪奇かもしれないが、文章は文章の記述者の頭脳を上回るものを表現しえないということばに則り、同じコードが書かれていることを願う。
'''

code = "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nhdoc = '''%s'''\n\ncode = %r\nprint(code%%(hdoc,code))"
print(code%(hdoc,code))
